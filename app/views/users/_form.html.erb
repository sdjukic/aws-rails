<%= form_for(@user, html: {class: "directUpload" }) do |f| %>
  <% if @user.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@user.errors.count, "error") %> prohibited this user from being saved:</h2>

      <ul>
      <% @user.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="field">
    <%= f.label :name %><br>
    <%= f.text_field :name %>
  </div>
  <div class="field">
    <%= f.label :avatar_url %><br>
    <%= f.file_field :avatar_url %>
  </div>
  <div class="actions">
    <%= f.submit %>
  </div>
  <script>
  
      $(function() {
          var MAX_LIMIT_FOR_FILE = 500000;
          $('.directUpload').find("input:file").each(function(i, elem) {
              var fileInput    = $(elem);
              var form         = $(fileInput.parents('form:first'));
              var submitButton = form.find('input[type="submit"]');
              var progressBar  = $("<div class='bar'></div>");
              var browseButton = form.find('#user_avatar_url');
              var barContainer = $("<div class='progress'></div>").append(progressBar);
    
              fileInput.after(barContainer);
              fileInput.fileupload({
              fileInput:       fileInput,
              url:             '<%= @s3_direct_post.url %>',
              type:            'POST',
              autoUpload:       true,
              formData:         <%= @s3_direct_post.fields.to_json.html_safe %>,
              paramName:        'file', // S3 does not like nested name fields i.e. name="user[avatar_url]"
              dataType:         'XML',  // S3 returns XML if success_action_status is set to 201
              replaceFileInput: false,
              add: function(e, data) {
                  console.log(data);
                  if (data.originalFiles[0].size > MAX_LIMIT_FOR_FILE){
                      progressBar.
                          css('background', 'red').
                          css('display', 'block').
                          css('width', '100%').
                          text("File too big. 500MB file limit!");
                      submitButton.prop('disabled', true);
                  }
                  else{
                    browseButton.prop('disabled', true);
                    if (data.autoUpload || (data.autoUpload !== false &&
                        $(this).fileupload('option', 'autoUpload'))) {
                            data.process().done(function () {
                            data.submit();
                        });
                    }
                  }
              },
              progressall: function (e, data) {
                  var progress = parseInt(data.loaded / data.total * 100, 10);
                  progressBar.css('width', progress + '%')
              },
              start: function (e) {
                  submitButton.prop('disabled', true);

                  progressBar.
                      css('background', 'green').
                      css('display', 'block').
                      css('width', '0%').
                      text("Loading...");
              },
              done: function(e, data) {
                  submitButton.prop('disabled', false);
                  progressBar.text("Uploading done");

                  // extract key and generate URL from response
                  var key   = $(data.jqXHR.responseXML).find("Key").text();
                  var url   = '//<%= @s3_direct_post.url.host %>/' + key;

                  // create hidden field
                  var input = $("<input />", { type:'hidden', name: fileInput.attr('name'), value: url })
                  form.append(input);

              },
                  fail: function(e, data) {
                      submitButton.prop('disabled', false);

                      progressBar.
                          css("background", "red").
                          text("Failed");
                  }
              });
          });
      });
  </script>
<% end %>
